High Priority
-------------
Don't forget about Games::parseLeave() for QUIT and KICK messages you lazy
prick!

Convert old flag code to use the new flags (FINALLY)
Add channel flag (long int) to channel entries
Add channel protection shit (see flags.h)
Add flag table, flag command, flag, flag chr, flags name (one table for chan, one for users)
Fix utils::flagToStr for the new flag table (above)


Medium Priority
---------------
DO NOT RANDOMISE QUESTION SEEKS IF ONLY 1 QUESTION IN A CATEGORY!!

Import connection/string/tokenizer code from evolution (eg. the latest
versions). Probably best to do this while reorganising the directories.

Redo select() process -- The BOT blindly outputs data without truely checking
if the output path is open. This is OK under low-traffic conditions, but when
things get intense it's a requirement! It should check before being able to
sent. Sockets should not be recreated each loop either, they should be created
and removed as appropriate to increase efficiency.

Finish parse command (shouldn't require ! on direct privmsgs)

Use "ISON" irc command (rfc 1459) to check for bot-users online (this should
also add support for ChanOP resyncronisation on AustNet, plus authentication
with other BOTs)

Add bot-authentication strings to userlist file (replace old prot variable
spot) -- also add a command to force nickop/other bot identification.

Add 'REHASH' command

Add 'RESTART' command (actually quit/respawn process)

Add setuser and setchan flag manipulation commands

Merge wanted channels and channels structures together and add a boolean
"joined" variable. This would be easier to work with considering the flags
etc.


Low Priority
------------
Finish !ping to perhaps ping other people.

Add a line wrapper for the Telnet 'spy' code so that words can wrap around to
the following line correctly (in ANSI::toANSI()?)

Add 'SPELL' command.. ispell library? gnu dictionary use most likely. If an
AI engine is to ever be added, this would most likely be needed!

Finish !lastseen (mask searching, channel mask searching)

Finish !access (mask searching, channel mask searching)
(Rewrite !access maybe?)

Much better logging code needs to be implemented with levels, zones etc.
This will require a log.c and log.h file

Ban lists - Should be better than ChanOP - check every nick change and join
against banlist masks, so that DumbOP can properly ban name!*@* like ChanOP
is incapable of.. (Cheeky`louise!*@* would be handy in #melbrave :)

Change over to GDBM Databases. Channel Masks should be removed and replaced
with references to channel database entries as to make it act more like
ChanOP, and to remove multiple user entries. Probably required prior to adding
an AI engine (Scott?). This GDBM integration should also allow for statistics
to be saved, such as peak levels (ops etc) to be kept properly.

Finish !names (- returns all; should only return channels user has access to)

Make a types.h file and put the different types in there rather than repeat
them over and over again throughout the source code (esp. the lists/maps etc)

SNMP section for stats etc

SMTP section for e-mail forwarding of 'notes', channel logging etc.

Currently the help-file thing sucks. It opens the file, and probably chews up
descriptors and is very very ugly. Searching a file everytime someone does
!help is a really gay idea, especially since the help file is endlessly
getting fatter and fatter. What do to? Convert it to a memory based system
instead, using a map for the help items, and output as strings, etc etc. This
also allows for quite a fair bit more flexibility, such as merging the command
name/access level banner with the command usage line.


Probably not needed :)
----------------------
Add WALLOPS support to check for netsplits? Will this be accurate across most
networks or just AustNet?? (WALLOPS is supported by telnetspy)

Command Counter

Add channel logging [24hr e-mail log to channel owner(s)]??

Combine !server and !serverlist, !nextserver and !reconnect
